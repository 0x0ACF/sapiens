#|
A simple HTML builder built on Chicken Scheme
Copyright (C) 2025  Andr√©s C.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
|#
(module sapiens *
  (import scheme)
  (import (chicken format))

  (define (page name . elems)
    (call-with-output-file name
      (lambda (port)
        (display "<!DOCTYPE html>" port)
        (let loop ((elems elems))
          (if (null? elems)
            #t
            (begin
              (display (car elems) port)
              (loop (cdr elems))))))))

  (define (string-join sep lst)
    (let loop ((result (car lst)) (lst (cdr lst)))
      (if (null? lst)
        result
        (begin
          (loop (string-append result sep (car lst)) (cdr lst))))))

  (define (t tag args)
    (if (pair? (car args))
    (let ((attrs (string-join " " (car args))) (content (string-join "" (cdr args))))
      (sprintf "<~A ~A>~A</~A>" tag attrs content tag))
    (let ((content (string-join "" args)))
      (sprintf "<~A>~A</~A>" tag content tag))))

  (define (attr k v)
    (sprintf "~A=\"~A\"" k v))

  (define (id v) (attr "id" v))
  (define (class v) (attr "class" v))

  (define (a . elems) (t "a" elems))
  (define (abbr . elems) (t "abbr" elems))
  (define (address . elems) (t "address" elems))
  (define (area . elems) (t "area" elems))
  (define (article . elems) (t "article" elems))
  (define (aside . elems) (t "aside" elems))
  (define (audio . elems) (t "audio" elems))
  (define (b . elems) (t "b" elems))
  (define (base . elems) (t "base" elems))
  (define (bdi . elems) (t "bdi" elems))
  (define (bdo . elems) (t "bdo" elems))
  (define (blockquote . elems) (t "blockquote" elems))
  (define (body . elems) (t "body" elems))
  (define (br . elems) (t "br" elems))
  (define (button . elems) (t "button" elems))
  (define (canvas . elems) (t "canvas" elems))
  (define (caption . elems) (t "caption" elems))
  (define (cite . elems) (t "cite" elems))
  (define (code . elems) (t "code" elems))
  (define (col . elems) (t "col" elems))
  (define (colgroup . elems) (t "colgroup" elems))
  (define (data . elems) (t "data" elems))
  (define (datalist . elems) (t "datalist" elems))
  (define (dd . elems) (t "dd" elems))
  (define (del . elems) (t "del" elems))
  (define (details . elems) (t "details" elems))
  (define (dfn . elems) (t "dfn" elems))
  (define (dialog . elems) (t "dialog" elems))
  (define (div . elems) (t "div" elems))
  (define (dl . elems) (t "dl" elems))
  (define (dt . elems) (t "dt" elems))
  (define (em . elems) (t "em" elems))
  (define (embed . elems) (t "embed" elems))
  (define (fieldset . elems) (t "fieldset" elems))
  (define (figcaption . elems) (t "figcaption" elems))
  (define (figure . elems) (t "figure" elems))
  (define (footer . elems) (t "footer" elems))
  (define (form . elems) (t "form" elems))
  (define (h1 . elems) (t "h1" elems))
  (define (head . elems) (t "head" elems))
  (define (header . elems) (t "header" elems))
  (define (hgroup . elems) (t "hgroup" elems))
  (define (hr . elems) (t "hr" elems))
  (define (html . elems) (t "html" elems))
  (define (i . elems) (t "i" elems))
  (define (iframe . elems) (t "iframe" elems))
  (define (img . elems) (t "img" elems))
  (define (input . elems) (t "input" elems))
  (define (ins . elems) (t "ins" elems))
  (define (kbd . elems) (t "kbd" elems))
  (define (label . elems) (t "label" elems))
  (define (legend . elems) (t "legend" elems))
  (define (li . elems) (t "li" elems))
  (define (link . elems) (t "link" elems))
  (define (main . elems) (t "main" elems))
  (define (map* . elems) (t "map" elems))
  (define (mark . elems) (t "mark" elems))
  (define (menu . elems) (t "menu" elems))
  (define (meta . elems) (t "meta" elems))
  (define (meter . elems) (t "meter" elems))
  (define (nav . elems) (t "nav" elems))
  (define (noscript . elems) (t "noscript" elems))
  (define (object . elems) (t "object" elems))
  (define (ol . elems) (t "ol" elems))
  (define (optgroup . elems) (t "optgroup" elems))
  (define (option . elems) (t "option" elems))
  (define (output . elems) (t "output" elems))
  (define (p . elems) (t "p" elems))
  (define (picture . elems) (t "picture" elems))
  (define (pre . elems) (t "pre" elems))
  (define (progress . elems) (t "progress" elems))
  (define (q . elems) (t "q" elems))
  (define (rp . elems) (t "rp" elems))
  (define (rt . elems) (t "rt" elems))
  (define (ruby . elems) (t "ruby" elems))
  (define (s . elems) (t "s" elems))
  (define (samp . elems) (t "samp" elems))
  (define (script . elems) (t "script" elems))
  (define (search . elems) (t "search" elems))
  (define (section . elems) (t "section" elems))
  (define (select . elems) (t "select" elems))
  (define (slot . elems) (t "slot" elems))
  (define (small . elems) (t "small" elems))
  (define (source . elems) (t "source" elems))
  (define (span . elems) (t "span" elems))
  (define (strong . elems) (t "strong" elems))
  (define (style . elems) (t "style" elems))
  (define (sub . elems) (t "sub" elems))
  (define (summary . elems) (t "summary" elems))
  (define (sup . elems) (t "sup" elems))
  (define (table . elems) (t "table" elems))
  (define (tbody . elems) (t "tbody" elems))
  (define (td . elems) (t "td" elems))
  (define (template . elems) (t "template" elems))
  (define (textarea . elems) (t "textarea" elems))
  (define (tfoot . elems) (t "tfoot" elems))
  (define (th . elems) (t "th" elems))
  (define (thead . elems) (t "thead" elems))
  (define (time . elems) (t "time" elems))
  (define (title . elems) (t "title" elems))
  (define (tr . elems) (t "tr" elems))
  (define (track . elems) (t "track" elems))
  (define (u . elems) (t "u" elems))
  (define (ul . elems) (t "ul" elems))
  (define (var . elems) (t "var" elems))
  (define (video . elems) (t "video" elems))
  (define (wbr . elems) (t "wbr" elems))
  (define (xmp . elems) (t "xmp" elems))
)
